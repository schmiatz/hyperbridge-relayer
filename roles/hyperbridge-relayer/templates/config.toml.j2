# Hyperbridge config, required
[hyperbridge]
# Hyperbridge chain spec, either one of Dev, Gargantua or Messier
chain = "{{ chain }}"
# Hyperbidge node ws rpc endpoint.
rpc_ws = "{{ hyperbridge_node_ws }}" # example endpoint

{% if eth_rpc is defined %}  
[ethereum]
# configuration type
type = "ethereum_sepolia"
# State machine identifier
state_machine = { Ethereum = "ExecutionLayer" }
# http(s) rpc url for sepolia
rpc_url = "{{ eth_rpc }}"
# consensus state identifier for sepolia on hyperbridge
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0xF763D969aDC8281b1A8459Bde4CE86BA811b0Aaf"
# Contract address of the IsmpHost contract
ismp_host = "0xe4226c474A6f4BF285eA80c2f01c0942B04323e5"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = "{{ eth_query_batch_size }}"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if arbitrum_rpc is defined %} 
[arbitrum]
# configuration type
type = "arbitrum"
# State machine identifier
state_machine = { Ethereum = "Arbitrum" }
# http(s) rpc url for arbitrum
rpc_url = "{{ arbitrum_rpc }}"
# consensus state identifier for arbitrum on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x5cD7935ffE0942f6fF05D447A1325109510DD846"
# Contract address of the IsmpHost contract
ismp_host = "0x56101AD00677488B3576C85e9e75d4F0a08BD627"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = "{{ arb_query_batch_size }}"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if optimism_rpc is defined %}
[optimism]
# configuration type
type = "optimism"
# State machine identifier
state_machine = { Ethereum = "Optimism" }
# http(s) rpc url for optimism
rpc_url = "{{ optimism_rpc }}"
# consensus state identifier for optimism on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x8738b27E29Af7c92ba2AF72B2fcF01C8934e3Db0"
# Contract address of the IsmpHost contract
ismp_host = "0x39f3D7a7783653a04e2970e35e5f32F0e720daeB"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = "{{ opt_query_batch_size }}"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if base_rpc is defined %}
[base]
# configuration type
type = "base"
# State machine identifier
state_machine = { Ethereum = "Base" }
# http(s) rpc url for base
rpc_url = "{{ base_rpc }}"
# consensus state identifier for base on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x0B26ba93424A7d00153abEb6388C55F960529E89"
# Contract address of the IsmpHost contract
ismp_host = "0x1D14e30e440B8DBA9765108eC291B7b66F98Fd09"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = "{{ base_query_batch_size }}"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if bsc_rpc is defined %}
[bsc]
# configuration type
type = "bsc"
# State machine identifier
state_machine = "Bsc"
# http(s) rpc url for binance smart chain
rpc_url = "{{ bsc_rpc }}"
# consensus state identifier for binance smart chain on hyperbridge
consensus_state_id = "BSC0"
# etherscan api key for querying BNB token price
etherscan_api_key = "{{ bscscan_bsc_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x3aBA86C71C86353e5a96E98e1E08411063B5e2DB"
# Contract address of the IsmpHost contract
ismp_host = "0x4e5bbdd9fE89F54157DDb64b21eD4D1CA1CDf9a6"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = "{{ bsc_query_batch_size }}"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

# Relayer config, required
[relayer]
# Hyperbridge chain spec, either one of Dev, Gargantua or Messier
chain = "{{ chain }}"
# Define your profitability configuration. 0 -> 0% i.e relay all requests, even unprofitable ones. 1 -> 1%. ie fees provided for requests must be profitable by at least 1%. etc. 
minimum_profit_percentage = {{ minimum_profit_percentage }}
# (Optional) If not empty, will filter requests to be delivered by originating module identifier (eg contract address)
module_filter = []
# (Optional) If not empty, only deliver to the specied state-machines
delivery_endpoints = [
{% if eth_rpc is defined %}
    { Ethereum = "ExecutionLayer" },
{% endif %}
{% if arbitrum_rpc is defined %}
    { Ethereum = "Arbitrum" },
{% endif %}
{% if optimism_rpc is defined %}
    { Ethereum = "Optimism" },
{% endif %}
{% if base_rpc is defined %}
    { Ethereum = "Base" },
{% endif %}
{% if bsc_rpc is defined %}
    "Bsc"
{% endif %}
]
