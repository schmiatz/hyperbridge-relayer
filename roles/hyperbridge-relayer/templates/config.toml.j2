# Hyperbridge config, required
[hyperbridge]
state_machine = "{{state_machine}}"
# Hyperbidge node ws rpc endpoint.
rpc_ws = "{{ hyperbridge_node_ws }}" # example endpoint

{% if eth_rpc is defined %}  
[ethereum]
# configuration type
type = "evm"
# State machine identifier
state_machine = "EVM-1"
# http(s) rpc url for sepolia
rpc_urls = {{ eth_rpc }}
# consensus state identifier for sepolia on hyperbridge
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x089248E869AEcd66199b64637207D366D6Cfe92D"
# Contract address of the IsmpHost contract
ismp_host = "0x792A6236AF69787C40cF76b69B4c8c7B28c4cA20"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = {{ eth_query_batch_size }}
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if arbitrum_rpc is defined %} 
[arbitrum]
# configuration type
type = "evm"
# State machine identifier
state_machine = "EVM-42161"
# http(s) rpc url for arbitrum
rpc_urls = {{ arbitrum_rpc }}
# consensus state identifier for arbitrum on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x089248E869AEcd66199b64637207D366D6Cfe92D"
# Contract address of the IsmpHost contract
ismp_host = "0xE05AFD4Eb2ce6d65c40e1048381BD0Ef8b4B299e"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = {{ arbitrum_query_batch_size }}
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if optimism_rpc is defined %}
[optimism]
# configuration type
type = "evm"
# State machine identifier
state_machine = "EVM-10"
# http(s) rpc url for optimism
rpc_urls = {{ optimism_rpc }}
# consensus state identifier for optimism on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x089248E869AEcd66199b64637207D366D6Cfe92D"
# Contract address of the IsmpHost contract
ismp_host = "0x78c8A5F27C06757EA0e30bEa682f1FD5C8d7645d"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = {{ optimism_query_batch_size }}
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if base_rpc is defined %}
[base]
# configuration type
type = "evm"
# State machine identifier
state_machine = "EVM-8453"
# http(s) rpc url for base
rpc_urls = {{ base_rpc }}
# consensus state identifier for base on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x089248E869AEcd66199b64637207D366D6Cfe92D"
# Contract address of the IsmpHost contract
ismp_host = "0x6FFe92e4d7a9D589549644544780e6725E84b248"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = {{ base_query_batch_size }}
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if bsc_rpc is defined %}
[bsc]
# configuration type
type = "evm"
# State machine identifier
state_machine = "EVM-56"
# http(s) rpc url for binance smart chain
rpc_urls = {{ bsc_rpc }}
# consensus state identifier for binance smart chain on hyperbridge
consensus_state_id = "BSC0"
# etherscan api key for querying BNB token price
etherscan_api_key = "{{ bscscan_bsc_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x089248E869AEcd66199b64637207D366D6Cfe92D"
# Contract address of the IsmpHost contract
ismp_host = "0x24B5d421Ec373FcA57325dd2F0C074009Af021F7"
# Maximum block range for eth_getLogs in a single rpc call
# if this parameter is not supplied the range will not be split into smaller chunks
query_batch_size = {{ bsc_query_batch_size }}
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if substrate is defined %}
[substrate]
type = "substrate"
# The state machine identifier for this substrate based chain.
# must be one of:
# - "POLKADOT-{paraId}"
# - "KUSAMA-{paraId}"
state_machine = "KUSAMA-4009"
# substrate node ws(s) rpc endpoint.
rpc_ws = "{{ substrate_node_ws }}" # example endpoint
# Configures the maximum size of an rpc request/response in bytes
max_rpc_payload_size = 150000000 # 150MB
# The consensus state identifier for this chain on hyperbridge.
# Only parachains are supported for now
consensus_state_id = "PARA"
# hex-encoded private key for the relayer account on this chain
signer = "{{ signer_substrate }}"
{% endif %}

# Relayer config, required
[relayer]
# Define your profitability configuration. 0 -> 0% i.e relay all requests, even unprofitable ones. 1 -> 1%. ie fees provided for requests must be profitable by at least 1%. etc. 
minimum_profit_percentage = {{ minimum_profit_percentage }}
# (Optional) If not empty, will filter requests to be delivered by originating module identifier (eg contract address)
module_filter = []
# How frequently to initiate withdrawals in seconds, defaults to 24 hours
withdrawal_frequency = {{withdrawal_frequency}}
# Minimum amount to withdraw when auto-withdrawing, defaults to $100
minimum_withdrawal_amount = {{minimum_withdrawal_amount}}
# (Optional) How frequently to retry unprofitable or failed messages in seconds.
# If this is value not supplied retries will not be enabled.
unprofitable_retry_frequency = {{unprofitable_retry_frequency}}
# (Optional) If not empty, only deliver to the specied state-machines
delivery_endpoints = [
{% if eth_rpc is defined %}
    "EVM-1",
{% endif %}
{% if arbitrum_rpc is defined %}
    "EVM-42161",
{% endif %}
{% if optimism_rpc is defined %}
    "EVM-10",
{% endif %}
{% if base_rpc is defined %}
    "EVM-8453",
{% endif %}
{% if bsc_rpc is defined %}
    "EVM-56",
{% endif %}
{% if substrate is defined %}
    "KUSAMA-4009",
{% endif %}
]

