# Hyperbridge config, required
[hyperbridge]
# Hyperbridge chain spec, either one of Dev, Gargantua or Messier
chain = "{{ chain }}"
# Hyperbidge node ws rpc endpoint.
rpc_ws = "{{ hyperbridge_node_ws }}" # example endpoint

{% if eth_rpc is defined %}  
[ethereum]
# configuration type
type = "ethereum_sepolia"
# State machine identifier
state_machine = { Ethereum = "ExecutionLayer" }
# http(s) rpc url for sepolia
rpc_url = "{{ eth_rpc }}"
# consensus state identifier for sepolia on hyperbridge
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x765AAd432dE3F116AE125b7844a590bf06e2A5C3"
# Contract address of the IsmpHost contract
ismp_host = "0x019B7Ef34afD8FeaB8F56a9f2efcE0042EEBF5e6"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if arbitrum_rpc is defined %} 
[arbitrum]
# configuration type
type = "arbitrum"
# State machine identifier
state_machine = { Ethereum = "Arbitrum" }
# http(s) rpc url for arbitrum
rpc_url = "{{ arbitrum_rpc }}"
# consensus state identifier for arbitrum on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0xb61Ba7abb3F9F169b12F0e5c45AC00CfF28647D4"
# Contract address of the IsmpHost contract
ismp_host = "0xcd00106921Cd7A9d68E6e9695E8E061c9F8a00CA"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if optimism_rpc is defined %}
[optimism]
# configuration type
type = "optimism"
# State machine identifier
state_machine = { Ethereum = "Optimism" }
# http(s) rpc url for optimism
rpc_url = "{{ optimism_rpc }}"
# consensus state identifier for optimism on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x9f2281ebF2C8a62467297d18076b012D39106295"
# Contract address of the IsmpHost contract
ismp_host = "0x4e9371CA8451efdCf45A7b762D6691420BF9932b"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if base_rpc is defined %}
[base]
# configuration type
type = "base"
# State machine identifier
state_machine = { Ethereum = "Base" }
# http(s) rpc url for base
rpc_url = "{{ base_rpc }}"
# consensus state identifier for base on hyperbridge, L2s use ethereum as their consensus oracle
consensus_state_id = "ETH0"
# etherscan api key for querying Ethereum token price
etherscan_api_key = "{{ etherscan_eth_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x26ccB584B646e774E5cadE5f2876927E653713Ee"
# Contract address of the IsmpHost contract
ismp_host = "0xd53f1c8B9c082001c51A10524C70Be599CE43E25"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

{% if bsc_rpc is defined %}
[bsc]
# configuration type
type = "bsc"
# State machine identifier
state_machine = "Bsc"
# http(s) rpc url for binance smart chain
rpc_url = "{{ bsc_rpc }}"
# consensus state identifier for binance smart chain on hyperbridge
consensus_state_id = "BSC0"
# etherscan api key for querying BNB token price
etherscan_api_key = "{{ bscscan_bsc_api_key }}"
# Contract address of the HandlerV1 contract
handler = "0x3D33Ed7194CabBe01C93B78fb9D9626DbF1B122c"
# Contract address of the IsmpHost contract
ismp_host = "0x5FDcdf9f9E5c792A6D892F3d39cAecdedffC9469"
# hex-encoded private key for the relayer
signer = "{{ signer }}"
{% endif %}

# Relayer config, required
[relayer]
# Hyperbridge chain spec, either one of Dev, Gargantua or Messier
chain = "{{ chain }}"
# Define your profitability configuration. 0 -> 0% i.e relay all requests, even unprofitable ones. 1 -> 1%. ie fees provided for requests must be profitable by at least 1%. etc. 
minimum_profit_percentage = {{ minimum_profit_percentage }}
# (Optional) If not empty, will filter requests to be delivered by originating module identifier (eg contract address)
module_filter = []
# (Optional) If not empty, only deliver to the specied state-machines
delivery_endpoints = [
{% if eth_rpc is defined %}
    { Ethereum = "ExecutionLayer" },
{% endif %}
{% if arbitrum_rpc is defined %}
    { Ethereum = "Arbitrum" },
{% endif %}
{% if optimism_rpc is defined %}
    { Ethereum = "Optimism" },
{% endif %}
{% if base_rpc is defined %}
    { Ethereum = "Base" },
{% endif %}
{% if bsc_rpc is defined %}
    "Bsc"
{% endif %}
]
